{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/mert/Desktop/I\\u0307TU\\u0308/Fall 2019/Bitirme/Project/pages/registration.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Layout from \"../components/AppLayout\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport { Button, Form, FormGroup, Label, Input, FormText, Alert } from 'reactstrap';\nimport Link from \"next/link\";\nimport axios from \"axios\";\nimport Router from 'next/router';\nimport ValidationError from \"../components/ValidationError\";\n\nvar bcrypt = require('bcryptjs');\n\nvar salt = bcrypt.genSaltSync(10);\n\nvar validator = require('../utils/validations');\n\nvar Registration =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Registration, _React$Component);\n\n  function Registration(props) {\n    var _this;\n\n    _classCallCheck(this, Registration);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Registration).call(this, props));\n    _this.state = {\n      nameSurname: '',\n      email: '',\n      password: '',\n      passwordConfirm: '',\n      validationErrors: {},\n      alertMessage: ''\n    };\n    _this.handleRegistration = _this.handleRegistration.bind(_assertThisInitialized(_this));\n    _this.handleInputChange = _this.handleInputChange.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Registration, [{\n    key: \"handleInputChange\",\n    value: function handleInputChange(event) {\n      var _this$setState;\n\n      var target = event.target;\n      var value = target.value;\n      var name = target.name;\n      var errors = this.state.validationErrors;\n      errors[name] = '';\n      this.setState((_this$setState = {}, _defineProperty(_this$setState, name, value), _defineProperty(_this$setState, \"validationErrors\", errors), _this$setState));\n    }\n  }, {\n    key: \"handleRegistration\",\n    value: function handleRegistration() {\n      var apiConfig = require('../api-config');\n\n      var url = apiConfig.serverUrl + '/user/save';\n\n      if (this.state.password !== this.state.passwordConfirm) {\n        document.getElementById('password-confirm').style.border = '1px solid red';\n        return;\n      }\n\n      var pass = bcrypt.hashSync(this.state.password, salt);\n      var validated = this.validate();\n      if (!validated) return;\n      axios.post(url, {\n        nameSurname: this.state.nameSurname,\n        email: this.state.email,\n        password: pass\n      }).then(function (response) {\n        Router.push('/login?registered=true');\n      })[\"catch\"](function (error) {\n        this.setState({\n          alertMessage: error.response.data.message\n        });\n      }.bind(this));\n    }\n  }, {\n    key: \"validate\",\n    value: function validate() {\n      var validated = true;\n      var errors = this.state.validationErrors;\n\n      if (this.state.nameSurname.length < 5) {\n        validated = false;\n        errors.nameSurname = \"Ad soyad alanına daha uzun bir değer girmelisiniz.\";\n      } else if (this.state.nameSurname.length > 50) {\n        validated = false;\n        errors.nameSurname = \"Ad soyad en fazla 50 karakterdan oluşabilir.\";\n      }\n\n      if (!validator.isEmail(this.state.email)) {\n        validated = false;\n        errors.email = \"Geçerli bir email adresi girmediniz.\";\n      }\n\n      if (this.state.password !== this.state.passwordConfirm) {\n        validated = false;\n        errors.passwordConfirm = \"Şifreler eşleşmiyor.\";\n      }\n\n      if (!validated) this.setState({\n        validationErrors: errors,\n        password: '',\n        passwordConfirm: ''\n      });\n      return validated;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(Layout, {\n        page: \"registration\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"container bg-white\",\n        style: {\n          padding: '3%',\n          marginTop: '3%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"row justify-content-md-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"col-md-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, this.state.alertMessage.length > 0 ? __jsx(Alert, {\n        color: \"danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, this.state.alertMessage) : '', __jsx(\"h2\", {\n        className: \"text-light bg-dark text-center rounded p-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, \" Kay\\u0131t Olun \"), __jsx(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }), __jsx(Form, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, __jsx(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, __jsx(Input, {\n        bsSize: \"lg\",\n        type: \"text\",\n        name: \"nameSurname\",\n        value: this.state.nameSurname,\n        onChange: this.handleInputChange,\n        id: \"nameSurname\",\n        placeholder: \"Ad\\u0131n\\u0131z\\u0131 ve soyad\\u0131n\\u0131z\\u0131 girin \",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }), __jsx(ValidationError, {\n        message: this.state.validationErrors.nameSurname,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      })), __jsx(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, __jsx(Input, {\n        bsSize: \"lg\",\n        type: \"email\",\n        name: \"email\",\n        value: this.state.email,\n        onChange: this.handleInputChange,\n        id: \"email\",\n        placeholder: \"Email adresinizi girin\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }), __jsx(ValidationError, {\n        message: this.state.validationErrors.email,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      })), __jsx(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, __jsx(Input, {\n        bsSize: \"lg\",\n        type: \"password\",\n        name: \"password\",\n        value: this.state.password,\n        onChange: this.handleInputChange,\n        id: \"password\",\n        placeholder: \"Parola belirleyin\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      })), __jsx(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, __jsx(Input, {\n        bsSize: \"lg\",\n        type: \"password\",\n        name: \"passwordConfirm\",\n        value: this.state.passwordConfirm,\n        onChange: this.handleInputChange,\n        id: \"password-confirm\",\n        placeholder: \"Parolan\\u0131z\\u0131 teyit edin\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      })), __jsx(Button, {\n        color: \"secondary\",\n        size: \"lg\",\n        onClick: this.handleRegistration,\n        block: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, \"Kayd\\u0131 Tamamla\")), __jsx(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }), __jsx(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, \"Zaten \\xFCye misiniz?\", __jsx(Link, {\n        href: '/login',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, __jsx(\"a\", {\n        className: \"text-dark\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, \" Giri\\u015F yap\\u0131n\")))))));\n    }\n  }]);\n\n  return Registration;\n}(React.Component);\n\nexport default Registration;","map":{"version":3,"sources":["/Users/mert/Desktop/İTÜ/Fall 2019/Bitirme/Project/pages/registration.js"],"names":["React","useState","Layout","Button","Form","FormGroup","Label","Input","FormText","Alert","Link","axios","Router","ValidationError","bcrypt","require","salt","genSaltSync","validator","Registration","props","state","nameSurname","email","password","passwordConfirm","validationErrors","alertMessage","handleRegistration","bind","handleInputChange","event","target","value","name","errors","setState","apiConfig","url","serverUrl","document","getElementById","style","border","pass","hashSync","validated","validate","post","then","response","push","error","data","message","length","isEmail","padding","marginTop","Component"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Layout from \"../components/AppLayout\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport { Button, Form, FormGroup, Label, Input, FormText, Alert } from 'reactstrap';\nimport Link from \"next/link\";\nimport axios from \"axios\";\nimport Router from 'next/router';\nimport ValidationError from \"../components/ValidationError\";\n\nconst bcrypt    = require('bcryptjs');\nconst salt      = bcrypt.genSaltSync(10);\nconst validator = require('../utils/validations');\n\nclass Registration extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            nameSurname: '',\n            email: '',\n            password: '',\n            passwordConfirm: '',\n            validationErrors: {},\n            alertMessage: ''\n        };\n        this.handleRegistration = this.handleRegistration.bind(this);\n        this.handleInputChange = this.handleInputChange.bind(this);\n    }\n    handleInputChange(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n\n        let errors = this.state.validationErrors;\n        errors[name] = '';\n\n        this.setState({\n            [name]: value,\n            validationErrors: errors\n        });\n    }\n    handleRegistration(){\n        const apiConfig = require('../api-config');\n        const url = apiConfig.serverUrl + '/user/save';\n        if (this.state.password !== this.state.passwordConfirm){\n            document.getElementById('password-confirm').style.border = '1px solid red';\n            return;\n        }\n        let pass = bcrypt.hashSync(this.state.password, salt);\n\n        let validated = this.validate();\n        if(!validated) return;\n        axios.post(url, {\n            nameSurname: this.state.nameSurname,\n            email: this.state.email,\n            password: pass\n        })\n            .then(function (response) {\n                Router.push('/login?registered=true');\n            })\n            .catch(function (error) {\n                this.setState({\n                    alertMessage: error.response.data.message\n                });\n            }.bind(this));\n    }\n    validate(){\n        let validated   = true;\n        let errors      = this.state.validationErrors;\n\n        if (this.state.nameSurname.length < 5){\n            validated = false;\n            errors.nameSurname = \"Ad soyad alanına daha uzun bir değer girmelisiniz.\"\n        }else if (this.state.nameSurname.length > 50){\n            validated = false;\n            errors.nameSurname = \"Ad soyad en fazla 50 karakterdan oluşabilir.\"\n        }\n\n        if(!validator.isEmail(this.state.email)){\n            validated = false;\n            errors.email = \"Geçerli bir email adresi girmediniz.\"\n        }\n\n        if(this.state.password !== this.state.passwordConfirm){\n            validated = false;\n            errors.passwordConfirm = \"Şifreler eşleşmiyor.\"\n        }\n\n        if (!validated)\n            this.setState({\n                validationErrors: errors,\n                password: '',\n                passwordConfirm: ''\n            });\n\n        return validated;\n    }\n    render() {\n        return (\n            <Layout page=\"registration\">\n                <div className=\"container bg-white\" style={{ padding:'3%', marginTop:'3%'}}>\n                    <div className=\"row justify-content-md-center\">\n                        <div className=\"col-md-4\">\n                            { this.state.alertMessage.length > 0 ?\n                            <Alert color=\"danger\">\n                                {this.state.alertMessage}\n                            </Alert>\n                                : ''\n                            }\n                            <h2 className=\"text-light bg-dark text-center rounded p-2\"> Kayıt Olun </h2>\n                            <hr/>\n                            <Form>\n                                <FormGroup>\n                                    <Input bsSize=\"lg\"\n                                           type=\"text\"\n                                           name=\"nameSurname\"\n                                           value={this.state.nameSurname}\n                                           onChange={this.handleInputChange}\n                                           id=\"nameSurname\"\n                                           placeholder=\"Adınızı ve soyadınızı girin \" />\n                                    <ValidationError message={this.state.validationErrors.nameSurname} />\n                                </FormGroup>\n                                <FormGroup>\n                                    <Input bsSize=\"lg\"\n                                           type=\"email\"\n                                           name=\"email\"\n                                           value={this.state.email}\n                                           onChange={this.handleInputChange}\n                                           id=\"email\"\n                                           placeholder=\"Email adresinizi girin\" />\n                                    <ValidationError message={this.state.validationErrors.email} />\n                                </FormGroup>\n                                <FormGroup>\n                                    <Input bsSize=\"lg\"\n                                           type=\"password\"\n                                           name=\"password\"\n                                           value={this.state.password}\n                                           onChange={this.handleInputChange}\n                                           id=\"password\"\n                                           placeholder=\"Parola belirleyin\" />\n                                </FormGroup>\n                                <FormGroup>\n                                    <Input bsSize=\"lg\"\n                                           type=\"password\"\n                                           name=\"passwordConfirm\"\n                                           value={this.state.passwordConfirm}\n                                           onChange={this.handleInputChange}\n                                           id=\"password-confirm\"\n                                           placeholder=\"Parolanızı teyit edin\" />\n                                </FormGroup>\n\n                                <Button color=\"secondary\"\n                                        size=\"lg\"\n                                        onClick={this.handleRegistration}\n                                        block>\n                                    Kaydı Tamamla\n                                </Button>\n                            </Form>\n                            <hr/>\n                            <p>Zaten üye misiniz?\n                                <Link href={'/login'} >\n                                    <a className=\"text-dark\"> Giriş yapın</a>\n                                </Link>\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            </Layout>\n        );\n    }\n}\n\nexport default Registration;"]},"metadata":{},"sourceType":"module"}