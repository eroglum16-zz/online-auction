{"version":3,"file":"static/webpack/static/development/pages/s/[id].js.65e26283073da47c7888.hot-update.js","sources":["webpack:///./components/ChatBox.js"],"sourcesContent":["import React from \"react\";\nimport { Card, CardHeader, CardBody, CardFooter} from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPaperPlane } from '@fortawesome/free-solid-svg-icons'\nimport 'react-chat-elements/dist/main.css';\nimport { MessageList, Input, Button } from 'react-chat-elements';\nimport {serverUrl} from '../api-config';\nimport axios from 'axios';\nimport socketIOClient from 'socket.io-client';\n\nconst socket = socketIOClient(serverUrl);\n\nclass ChatBox extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: '',\n            messages: []\n        };\n        this.handleInputChange  = this.handleInputChange.bind(this);\n        this.handleEnter        = this.handleEnter.bind(this);\n        this.handleSendClick    = this.handleSendClick.bind(this);\n    }\n    componentDidMount() {\n        this.getMessages();\n        if(this.props.saleId){\n            socket.on('new message on ' + this.props.saleId, (msg) => {\n                if(msg.receiverEmail === this.props.userEmail)\n                    this.getMessages();\n            });\n        }\n        let counter = 0;\n        if (this.state.messages.length === 0){\n            let intervalId;\n            intervalId = setInterval(() => {\n                this.getMessages();\n                if (this.state.messages.length !== 0){\n                    clearInterval(intervalId);\n                }\n            }, 500);\n        }\n        if (!this.props.saleId){\n            let intervalId2;\n            intervalId2 = setInterval(() => {\n                if(this.props.saleId){\n                    socket.on('new message on ' + this.props.saleId, (msg) => {\n                        if(msg.receiverEmail === this.props.userEmail)\n                            this.getMessages();\n                    });\n                    clearInterval(intervalId2);\n                }\n                counter ++;\n                console.log(counter);\n            }), 1000;\n        }\n        /*\n\n        */\n    }\n    handleInputChange(event) {\n        const target = event.target;\n        const value = target.value;\n\n        this.setState({\n            message: value,\n        });\n    }\n    handleEnter(event) {\n        if (event.key === 'Enter') {\n            this.sendMessage();\n        }\n    }\n    handleSendClick(){\n        this.sendMessage();\n    }\n    sendMessage(){\n        const url = serverUrl + '/message/new';\n        axios.post(url, {\n            text: this.state.message,\n            receiverEmail: this.props.receiverEmail,\n            saleId: this.props.saleId\n        },{\n            headers:{\n                authorization: this.props.userToken\n            }\n        }).then((response) => {\n            console.log(response.data);\n            this.setState({\n                message: ''\n            });\n            socket.emit('new message', {\n                relatedSale: this.props.saleId,\n                receiverEmail: this.props.receiverEmail\n            });\n            this.refs.message.clear();\n            this.getMessages();\n        }).catch((error) => {\n            throw error;\n        });\n    }\n    getMessages(){\n        console.log(\"Sale ID: \"+this.props.saleId);\n        console.log(\"Token: \"+this.props.userToken);\n        const url = serverUrl + '/messages/' + this.props.saleId;\n        axios.post(url, {}, {\n            headers:{\n                authorization: this.props.userToken\n            }\n        }).then((response) => {\n            this.setState({\n                messages: response.data.messages\n            });\n        }).catch((error) => {\n            console.log(error);\n        });\n    }\n\n    render() {\n        let dataSource = [];\n        let messages = this.state.messages;\n        let i;\n        for (i in messages){\n            dataSource.push({\n                position: messages[i].receiverEmail === this.props.receiverEmail ? 'right' : 'left',\n                type: 'text',\n                className: 'mb-2',\n                text: messages[i].messageText,\n                date: messages[i].createdAt\n            });\n        }\n        return (\n            <div>\n                <Card>\n                    <CardHeader className=\"bg-dark text-white\">\n                        {this.props.interlocutor}\n                        <span className=\"float-right\"> {this.props.salePrice}₺ </span>\n                    </CardHeader>\n                    <CardBody style={{minHeight: '400px'}}>\n                        <MessageList\n                            className='message-list'\n                            lockable={true}\n                            toBottomHeight={'100%'}\n                            dataSource={dataSource} />\n                    </CardBody>\n                    <CardFooter className=\"bg-light\">\n                        <Input\n                            placeholder=\"Mesajınız...\"\n                            className=\"pl-2\"\n                            multiline={false}\n                            ref=\"message\"\n                            value={this.state.message}\n                            onChange={this.handleInputChange}\n                            onKeyDown={this.handleEnter}\n                            rightButtons={\n                                <Button\n                                    color='white'\n                                    className='bg-dark btn-lg pl-4 pr-4'\n                                    onClick={this.handleSendClick}\n                                    text={<FontAwesomeIcon icon={faPaperPlane} width=\"16\" />} />\n                            }/>\n                    </CardFooter>\n                </Card>\n\n            </div>\n        );\n    }\n}\n\nexport default ChatBox;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AARA;AASA;AACA;;;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;;;AAGA;;;AACA;AACA;AACA;AAEA;AACA;AADA;AAGA;;;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AADA;AAKA;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AAFA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AADA;AAGA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoBA;;;;AAzJA;AACA;AA2JA;;;;A","sourceRoot":""}